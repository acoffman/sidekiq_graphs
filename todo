# TODO

- I feel like store is too coupled to "start the workflow" is that okay? Maybe not... how do we effectively decouple them
- Nodes get queued up and run if they have an indegree of zero. Now need to add callbacks (middleware maybe?) to mark nodes as visited when they finish running. This will require the worker (or middleware) knowing the node_id


# Ideas

- Should Node be a mixin or abstract class and then we make a RedisNode?
- Would [Redis::Objects][] be useful?
- Maybe it makes sense for us to define a persistence API, and then dependency inject an instance of something to the graph instance (redis, memory, etc) rather than having them be helper classes that take graph objects

[Redis::Objects]: https://github.com/nateware/redis-objects
