# TODO

- I feel like store is too coupled to "start the workflow" is that okay? Maybe not... how do we effectively decouple them
- Nodes can run, and mark themselves as 'visited' on completion, but now we need to figure out what to do with them in redis once they're done... move them to permenant storage and delete them? Needs to be cleaned up somehow.


# Ideas

- Should Node be a mixin or abstract class and then we make a RedisNode?
- Would [Redis::Objects][] be useful?
- Maybe it makes sense for us to define a persistence API, and then dependency inject an instance of something to the graph instance (redis, memory, etc) rather than having them be helper classes that take graph objects

[Redis::Objects]: https://github.com/nateware/redis-objects
